name: Deploy to AWS ECS

on:
  push:
    branches:
      - main  # Triggers the workflow when pushing to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository 
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up AWS credentials using GitHub Secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      # Step 4: Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .
          docker tag ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

      # Step 5: Push the Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

      # Step 6: Deploy to ECS
      - name: Deploy to ECS
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Fetch the current task definition
          TASK_DEFINITION_ARN=$(aws ecs describe-services --cluster ${{ secrets.ECS_CLUSTER }} --services ${{ secrets.ECS_SERVICE }} --query "services[0].taskDefinition" --output text)
          
          if [ -z "$TASK_DEFINITION_ARN" ]; then
            echo "Error: Unable to retrieve the task definition ARN"
            exit 1
          fi

          # Extract the family and container definitions from the task definition ARN
          TASK_FAMILY=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_ARN --query "taskDefinition.family" --output text)
          CONTAINER_DEFINITIONS=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_ARN --query "taskDefinition.containerDefinitions" --output json)

          if [ -z "$TASK_FAMILY" ]; then
            echo "Error: Unable to retrieve task family"
            exit 1
          fi

          # Debug: Print container definitions
          echo "Current Container Definitions: $CONTAINER_DEFINITIONS"

          # Update the container image with the new image from ECR
          NEW_CONTAINER_DEFINITIONS=$(echo "$CONTAINER_DEFINITIONS" | jq 'map(if .name == "todo-app" then .image = "'${{ secrets.ECR_REGISTRY }}'/'${{ secrets.ECR_REPOSITORY }}':latest" else . end)')

          if [ -z "$NEW_CONTAINER_DEFINITIONS" ]; then
            echo "Error: Unable to update container definition with new image"
            echo "Container definitions: $CONTAINER_DEFINITIONS"  # Print the original definitions for debugging
            exit 1
          fi

          # Register the new task definition
          NEW_TASK_DEF=$(aws ecs register-task-definition \
            --family $TASK_FAMILY \
            --container-definitions "$NEW_CONTAINER_DEFINITIONS" \
            --execution-role-arn $(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_ARN --query "taskDefinition.executionRoleArn" --output text) \
            --task-role-arn $(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_ARN --query "taskDefinition.taskRoleArn" --output text) \
            --network-mode $(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_ARN --query "taskDefinition.networkMode" --output text) \
            --requires-compatibilities $(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_ARN --query "taskDefinition.requiresCompatibilities" --output text) \
            --cpu $(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_ARN --query "taskDefinition.cpu" --output text) \
            --memory $(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_ARN --query "taskDefinition.memory" --output text))

          if [ $? -ne 0 ]; then
            echo "Error: Failed to register new task definition"
            exit 1
          fi

          # Update ECS service to use the new task definition
          NEW_TASK_DEFINITION_ARN=$(echo $NEW_TASK_DEF | jq -r '.taskDefinition.taskDefinitionArn')

          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --task-definition $NEW_TASK_DEFINITION_ARN \
            --force-new-deployment

          if [ $? -ne 0 ]; then
            echo "Error: Failed to update ECS service"
            exit 1
          fi
